#! /bin/bash
# usage: titan-gc-cli [-h] [-i STR] [--inputs STR] [-o STR] [--outdir STR] [--options STR] [--verbose]
#
# titan-gc-cli - Run Titan GC on a set of samples.
#
# required arguments:
#   -i STR, --inputs STR  The JSON file to be used with Cromwell for inputs.
#   -o STR, --outdir STR  Output directory to store the final results in.
#
# optional arguments:
#   -h, --help            show this help message and exit
#   --options STR         JSON file containing Cromwell options
#   --verbose             Print out all STDOUT from Cromwell and titan-organize
set -e
set -u
OPTIONS="0"
QUIET="0"
PROFILE="docker"
CONFIG="0"
CROMWELL_OPTS=""
VERSION="1.4.4"
TITAN_PATH=$(which titan-gc-cli | sed 's=bin/titan-gc-cli==')
TITAN_SHARE=${TITAN_PATH}/share/titan-gc-cli-${VERSION}
CROMWELL_JAR=$(which cromwell | sed 's=bin/cromwell=share/cromwell/cromwell.jar=')
LOG_LEVEL=ERROR

usage() {
    echo "usage: titan-gc-cli [-h] [-i STR] [--inputs STR] [-o STR] [--outdir STR] [--options STR] [--quiet]"
    echo ""
    echo "titan-gc-cli - Run Titan GC on a set of samples."
    echo ""
    echo "required arguments:"
    echo "  -i STR, --inputs STR  The JSON file to be used with Cromwell for inputs."
    echo "  -o STR, --outdir STR  Output directory to store the final results in."
    echo ""
    echo "optional arguments:"
    echo "  -h, --help            show this help message and exit"
    echo "  --options STR         JSON file containing Cromwell options"
    echo "  --profile STR         The backend profile to use [options: docker, singularity]"
    echo "  --config STR          Custom backend profile to use"
    echo "  --cromwell_jar STR    Path to cromwell.jar (Default use conda install)"
    echo "  --quiet               Silence all STDOUT from Cromwell and titan-gc-organize"

    if [ -n "$1" ]; then
        exit "$1"
    fi
}

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -i|--inputs) INPUTS="$2"; shift ;;
        -o|--outdir) OUTDIR="$2"; shift ;;
        -h|--help) usage 0 ;;
        --options) OPTIONS="$2"; shift ;;
        --profile) PROFILE="$2" ; shift ;;
        --config) CONFIG="$2" ; shift ;;
        --cromwell_jar) CROMWELL_JAR="$2" ; shift ;;
        --quiet) QUIET="1" ;;
        *) echo "Unknown parameter passed: $1"; usage 1 ;;
    esac
    shift
done

if [[ -z ${INPUTS+x} ]]; then
    echo "ERROR: -i/--inputs is required"
    usage 1
elif [[ -z ${OUTDIR+x} ]]; then
    echo "ERROR: -o/--outdir is required"
    usage 1
fi

# CONFIG != means user provided config
if [[ "${CONFIG}" == "0" ]]; then
    # Use built in config
    if [[ "${PROFILE}" == "docker" ]]; then
        # Default
        CONFIG="docker.config"
    elif [[ "${PROFILE}" == "singularity" ]]; then
        CONFIG="singularity.config"
        if [[ -z ${SINGULARITY_CACHEDIR+x} ]]; then 
            CACHE_DIR=${HOME}/.singularity/titan-cache
        else 
            CACHE_DIR=${SINGULARITY_CACHEDIR}
        fi
        # Check if images are built
        mkdir -p ${CACHE_DIR}
        WARNED="0"
        while IFS=$'\t' read -r container version sha256_hash; do
            container_name="${container}@${sha256_hash}"
            renamed=${container_name//[\/:]/-}
            IMAGE="${CACHE_DIR}/${renamed}.img"
            if [[ ! -f ${IMAGE} ]]; then
                if [[ ${WARNED} == "0" ]]; then
                    echo "Building Singularity images, this will be a while... Coffee time?" 1>&2
                    WARNED="1"
                fi
                echo "Building Singularity image: ${IMAGE}" 1>&2
                if [[ ${QUIET} == "0" ]]; then
                    singularity build ${IMAGE} docker://${container_name}
                else
                    singularity build ${IMAGE} docker://${container_name} 1> /dev/null
                fi
            else
                if [[ ${QUIET} == "0" ]]; then
                    echo "Skipping build of existing Singularity image: ${IMAGE}" 1>&2
                fi
            fi
        done < ${TITAN_SHARE}/conf/containers.txt
    else
        echo "Uknown profile: ${PROFILE}, exiting..."
        usage 1
    fi
fi

if [[ "${OPTIONS}" != "0" ]]; then
    CROMWELL_OPTS="-o ${OPTIONS}"
fi

mkdir -p ${OUTDIR}
echo "Running Titan GC (use --quiet to quiet things down a bit)" 1>&2
CONFIG_PATH="${TITAN_SHARE}/conf/${CONFIG}"
if [[ ${QUIET} == "0" ]]; then 
    java -Dconfig.file=${CONFIG_PATH} -jar ${CROMWELL_JAR} run -i ${INPUTS} \
        -m ${OUTDIR}/titan-metadata.json ${CROMWELL_OPTS} ${TITAN_SHARE}/workflows/wf_titan_gc.wdl 2> ${OUTDIR}/cromwell-stderr.txt | tee ${OUTDIR}/cromwell-stdout.txt
else
    java -Dconfig.file=${CONFIG_PATH} -jar ${CROMWELL_JAR} run -i ${INPUTS} \
        -m ${OUTDIR}/titan-metadata.json ${CROMWELL_OPTS} ${TITAN_SHARE}/workflows/wf_titan_gc.wdl > ${OUTDIR}/cromwell-stdout.txt 2> ${OUTDIR}/cromwell-stderr.txt
fi
echo "Titan GC complete, organizing outputs" 1>&2
titan-gc-organize.py ${OUTDIR}/titan-metadata.json --outdir ${OUTDIR}
